// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var ArcCurve, CubicBezierCurve3, Line3, QuadraticBezierCurve3, Spline, SplineCurve3, THREE, Vector2, Vector3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  THREE = require('three');

  /**
    *All classes , functions etc defined here are simple wrappers, to make "logical" namespacing
    *easier (ie Maths.Vector2 instead of THREE.Vector2), and to add a level of indirection between api and implementation:
    ie we can decouple changes in the THREE.js api from our own
    *
  */


  /** 
  * 3d vector class: simple wrapper around THREE.Vector3 + some additional params parsing helpers
  */


  Vector3 = (function(_super) {
    __extends(Vector3, _super);

    function Vector3() {
      _ref = Vector3.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Vector3.prototype.clone = function() {
      return new Vector3(this.x, this.y, this.z);
    };

    return Vector3;

  })(THREE.Vector3);

  Vector2 = (function(_super) {
    __extends(Vector2, _super);

    function Vector2() {
      _ref1 = Vector2.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Vector2.prototype.clone = function() {
      return new Vector2(this.x, this.y);
    };

    return Vector2;

  })(THREE.Vector2);

  Line3 = (function(_super) {
    __extends(Line3, _super);

    function Line3() {
      _ref2 = Line3.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Line3.prototype.clone = function() {
      return new Line3().copy(this);
    };

    return Line3;

  })(THREE.Line3);

  Spline = (function(_super) {
    __extends(Spline, _super);

    function Spline() {
      _ref3 = Spline.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Spline.prototype.clone = function() {
      return new Spline(this.points);
    };

    return Spline;

  })(THREE.Spline);

  SplineCurve3 = (function(_super) {
    __extends(SplineCurve3, _super);

    function SplineCurve3() {
      _ref4 = SplineCurve3.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    SplineCurve3.prototype.clone = function() {
      return new SplineCurve3(this.points);
    };

    return SplineCurve3;

  })(THREE.SplineCurve3);

  ArcCurve = (function(_super) {
    __extends(ArcCurve, _super);

    function ArcCurve() {
      _ref5 = ArcCurve.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    return ArcCurve;

  })(THREE.ArcCurve);

  CubicBezierCurve3 = (function(_super) {
    __extends(CubicBezierCurve3, _super);

    function CubicBezierCurve3() {
      _ref6 = CubicBezierCurve3.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    return CubicBezierCurve3;

  })(THREE.CubicBezierCurve3);

  QuadraticBezierCurve3 = (function(_super) {
    __extends(QuadraticBezierCurve3, _super);

    function QuadraticBezierCurve3() {
      _ref7 = QuadraticBezierCurve3.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return QuadraticBezierCurve3;

  })(THREE.QuadraticBezierCurve3);

  module.exports = {
    Vector2: Vector2,
    Vector3: Vector3,
    Spline: Spline,
    Spline3: SplineCurve3,
    ArcCurve: ArcCurve,
    Euler: THREE.Euler,
    CubicBezierCurve3: CubicBezierCurve3,
    QuadraticBezierCurve3: QuadraticBezierCurve3
  };

}).call(this);
